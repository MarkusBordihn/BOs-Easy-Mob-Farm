+++ block/entity/farm/[[ --BlockName-- ]]Entity.java
@@@ create @@@

package de.markusbordihn.easymobfarm.block.entity;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import net.minecraft.core.BlockPos;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.TranslatableComponent;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.sounds.SoundSource;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockState;

import net.minecraftforge.event.server.ServerAboutToStartEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;

import de.markusbordihn.easymobfarm.Constants;
import de.markusbordihn.easymobfarm.block.ModBlocks;
import de.markusbordihn.easymobfarm.config.CommonConfig;
import de.markusbordihn.easymobfarm.menu.[[ --BlockName-- ]]Menu;

@EventBusSubscriber
public class [[ --BlockName-- ]]Entity extends MobFarmBlockEntity {

  private static final Logger log = LogManager.getLogger(Constants.LOG_NAME);
  private static final CommonConfig.Config COMMON = CommonConfig.COMMON;

  // Config settings
  private static int [[ --blockName-- ]]ProcessTime = COMMON.[[ --blockName-- ]]ProcessTime.get();
  private static int farmProcessingTime = 0;

  public [[ --BlockName-- ]]Entity(BlockPos blockPos, BlockState blockState) {
    super(ModBlocks.[[ --BLOCK_NAME-- ]]_ENTITY.get(), blockPos, blockState);
  }

  public [[ --BlockName-- ]]Entity(BlockEntityType<?> blockEntity, BlockPos blockPos,
      BlockState blockState) {
    super(blockEntity, blockPos, blockState);
  }

  @SubscribeEvent
  public static void handleServerAboutToStartEvent(ServerAboutToStartEvent event) {
    [[ --blockName-- ]]ProcessTime = COMMON.[[ --blockName-- ]]ProcessTime.get();
    farmProcessingTime = [[ --blockName-- ]]ProcessTime * 20;
    log.info("{}: [[ --BlockName-- ]] Entity with drops every {}s", Constants.LOG_MOB_FARM_PREFIX,
        [[ --blockName-- ]]ProcessTime);
  }

  @Override
  protected Component getDefaultName() {
    return new TranslatableComponent("container.easy_mob_farm.[[ --block_name-- ]]");
  }

  @Override
  protected AbstractContainerMenu createMenu(int windowId, Inventory inventory) {
    return new [[ --BlockName-- ]]Menu(windowId, inventory, this, this.dataAccess);
  }

  @Override
  public int getFarmProcessingTime() {
    return farmProcessingTime;
  }

  @Override
  public void processAdditionalEffects(Level level, BlockPos blockPos,
      MobFarmBlockEntity blockEntity, ItemStack capturedMob) {
    super.processAdditionalEffects(level, blockPos, blockEntity, capturedMob);
    level.playSound(null, blockPos, SoundEvents.CHICKEN_EGG, SoundSource.BLOCKS, 1.0F, 1.0F);
  }

}

+++ block/[[ --BlockName-- ]].java
@@@ create @@@

package de.markusbordihn.easymobfarm.block;

import java.util.Set;
import javax.annotation.Nullable;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import net.minecraft.core.BlockPos;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.context.UseOnContext;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.entity.BlockEntityTicker;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;

import de.markusbordihn.easymobfarm.Constants;
import de.markusbordihn.easymobfarm.block.entity.[[ --BlockName-- ]]Entity;
import de.markusbordihn.easymobfarm.config.biome.Plains;
import de.markusbordihn.easymobfarm.menu.MobFarmMenu;

public class [[ --BlockName-- ]] extends MobFarmBlock {

  public static final String NAME = "[[ --block_name-- ]]";

  private static final Logger log = LogManager.getLogger(Constants.LOG_NAME);

  private static final Set<String> acceptedMobTypes = Plains.Passive;

  public [[ --BlockName-- ]](BlockBehaviour.Properties properties) {
    super(properties);
  }

  public static boolean isAcceptedCapturedMobType(String mobType) {
    return acceptedMobTypes.contains(mobType);
  }

  @Override
  public Set<String> getAcceptedMobTypes() {
    return acceptedMobTypes;
  }

  @Override
  public boolean isAcceptedMobType(String mobType) {
    return acceptedMobTypes.contains(mobType);
  }

  @Override
  public BlockEntity newBlockEntity(BlockPos blockPos, BlockState blockState) {
    return new [[ --BlockName-- ]]Entity(ModBlocks.[[ --BLOCK_NAME-- ]]_ENTITY.get(), blockPos, blockState);
  }

  @Override
  protected void openContainer(Level level, BlockPos blockPos, Player player) {
    if (level.getBlockEntity(blockPos) instanceof [[ --BlockName-- ]]Entity [[ --blockName-- ]]Entity) {
      player.openMenu([[ --blockName-- ]]Entity);
    }
  }

  @Override
  public InteractionResult consumeCapturedMob(Level level, BlockPos blockPos, BlockState blockState,
      BlockEntity blockEntity, ItemStack itemStack, UseOnContext context) {
    [[ --BlockName-- ]]Entity chickenMobFarmEntity = ([[ --BlockName-- ]]Entity) blockEntity;
    chickenMobFarmEntity.updateLevel(level);
    if (!chickenMobFarmEntity.hasItem(MobFarmMenu.CAPTURED_MOB_SLOT)) {
      chickenMobFarmEntity.setItem(MobFarmMenu.CAPTURED_MOB_SLOT,itemStack);
      context.getPlayer().setItemInHand(context.getHand(), ItemStack.EMPTY);
      return InteractionResult.CONSUME;
    }
    return InteractionResult.PASS;
  }

  @Override
  @Nullable
  public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState blockState,
      BlockEntityType<T> blockEntityType) {
    return level.isClientSide ? null
        : createTickerHelper(blockEntityType, ModBlocks.[[ --BLOCK_NAME-- ]]_ENTITY.get(),
            [[ --BlockName-- ]]Entity::serverTick);
  }

}

+++ block/ModBlocks.java
@@@ after:@TemplateEntryPoint("Register Blocks") @@@

  public static final RegistryObject<Block> [[ --BLOCK_NAME-- ]] =
      BLOCKS.register([[ --BlockClassName-- ]].NAME, () -> new [[ --BlockClassName-- ]](BlockBehaviour.Properties
          .of(Material.STONE).requiresCorrectToolForDrops().strength(2.0F, 2.0F)
          .lightLevel([[ --BlockClassName-- ]]::getLightLevel).noOcclusion()));

+++ block/ModBlocks.java
@@@ after:@TemplateEntryPoint("Register Entity") @@@

  public static final RegistryObject<BlockEntityType<[[ --BlockClassName-- ]]Entity>> [[ --BLOCK_NAME-- ]]_ENTITY =
      ENTITIES.register([[ --BlockClassName-- ]].NAME, () -> BlockEntityType.Builder
          .of([[ --BlockClassName-- ]]Entity::new, [[ --BLOCK_NAME-- ]].get()).build(null));

+++ client/renderer/farm/[[ --BlockName-- ]]Renderer.java
@@@ create @@@

package de.markusbordihn.easymobfarm.client.renderer;

import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;

public class [[ --BlockName-- ]]Renderer extends AnimalFarmRenderer {

  public [[ --BlockName-- ]]Renderer(BlockEntityRendererProvider.Context context) {
    super(context);
  }

}

+++ client/renderer/ClientRenderer.java
@@@ after:// @TemplateEntryPoint("Register Entity Renderer") @@@
    event.registerBlockEntityRenderer(ModBlocks.[[ --BLOCK_NAME-- ]]_ENTITY.get(),
        [[ --BlockClassName-- ]]Renderer::new);

+++ client/renderer/ClientRenderer.java
@@@ after:// @TemplateEntryPoint("Register Render Layers") @@@
      ItemBlockRenderTypes.setRenderLayer(ModBlocks.[[ --BLOCK_NAME-- ]].get(),
          RenderType.cutoutMipped());

+++ client/screen/farm/[[ --BlockName-- ]]Screen.java
@@@ create @@@

package de.markusbordihn.easymobfarm.client.screen;

import com.mojang.blaze3d.systems.RenderSystem;
import com.mojang.blaze3d.vertex.PoseStack;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import net.minecraft.client.renderer.GameRenderer;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;

import de.markusbordihn.easymobfarm.Constants;
import de.markusbordihn.easymobfarm.menu.[[ --BlockName-- ]]Menu;

public class [[ --BlockName-- ]]Screen extends MobFarmScreen<[[ --BlockName-- ]]Menu> {

  public static final Logger log = LogManager.getLogger(Constants.LOG_NAME);

  private static final ResourceLocation TEXTURE =
      new ResourceLocation(Constants.MOD_ID, "textures/container/[[ --block_name-- ]]_gui.png");
  private static final ResourceLocation SNAP =
      new ResourceLocation(Constants.MOD_ID, "textures/container/snaps/pig_snap.png");

  public [[ --BlockName-- ]]Screen([[ --BlockName-- ]]Menu menu, Inventory inventory,
      Component component) {
    super(menu, inventory, component);
  }

  @Override
  public void init() {
    super.init();
    this.backgroundTexture = TEXTURE;
  }

  @Override
  protected void renderSnap(PoseStack poseStack) {
    RenderSystem.setShader(GameRenderer::getPositionTexShader);
    RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
    RenderSystem.setShaderTexture(0, SNAP);

    // Scale snap image (34x53)
    blit(poseStack, leftPos + 6, topPos + 22, 0, 0, SNAP_WITH, SNAP_HEIGHT, SNAP_WITH, SNAP_HEIGHT);
  }
}

+++ screen/ClientScreens.java
@@@ after:// Mob Farm UI screen @@@

MenuScreens.register([[ --BlockName-- ]]Menu.TYPE, [[ --BlockName-- ]]Screen::new);

+++ config/CommonConfig.java
@@@ before:Config(ForgeConfigSpec.Builder builder) { @@@

public final ForgeConfigSpec.IntValue [[ --blockName-- ]]ProcessTime;

+++ config/CommonConfig.java
@@@ before:// @TemplateEntryPoint("Register Forge Config Spec") @@@

      builder.push("[[ --BlockName-- ]]");
      [[ --blockName-- ]]ProcessTime =
          builder.comment("Defines after how many seconds a drop is performed.")
              .defineInRange("[[ --blockName-- ]]ProcessTime", 300, 10, 3600);
      builder.pop();

+++ item/ModItems.java
@@@ after:@TemplateEntryPoint("Register Block Items") @@@

  public static final RegistryObject<Item> [[ --BLOCK_NAME-- ]] =
      ITEMS.register([[ --BlockClassName-- ]].NAME, () -> new BlockItem(ModBlocks.[[ --BLOCK_NAME-- ]].get(),
          new Item.Properties().tab(EasyMobFarmTab.MOB_FARM)));

+++ menu/farm/[[ --BlockName-- ]]Menu.java
@@@ create @@@

package de.markusbordihn.easymobfarm.menu;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import net.minecraft.world.Container;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.inventory.ContainerData;
import net.minecraft.world.inventory.MenuType;
import net.minecraftforge.registries.ObjectHolder;

import de.markusbordihn.easymobfarm.Constants;
import de.markusbordihn.easymobfarm.block.[[ --BlockName-- ]];

public class [[ --BlockName-- ]]Menu extends MobFarmMenu {

  public static final Logger log = LogManager.getLogger(Constants.LOG_NAME);

  @ObjectHolder("easy_mob_farm:[[ --block_name-- ]]")
  public static MenuType<[[ --BlockName-- ]]Menu> TYPE;

  public [[ --BlockName-- ]]Menu(int windowIdIn, Inventory inventory) {
    super(windowIdIn, inventory);
  }

  public [[ --BlockName-- ]]Menu(final int windowId, final Inventory playerInventory, final Container container,
      final ContainerData containerData) {
    super(windowId, playerInventory, container, containerData, TYPE);
  }

  @Override
  public boolean mayPlaceCapturedMobType(String mobType) {
    return [[ --BlockName-- ]].isAcceptedCapturedMobType(mobType);
  }

}

+++ EasyMobFarm.java
@@@ after:// Mob Farm Container Menu @@@

    event.getRegistry().registerAll(
        new MenuType<>([[ --BlockName-- ]]Menu::new).setRegistryName(Constants.[[ --BLOCK_NAME-- ]]));

+++ blockstates/[[ --block_name-- ]].json
@@@ create @@@

{
  "variants": {
    "facing=north": {
      "model": "easy_mob_farm:block/[[ --block_name-- ]]",
      "y": 0
    },
    "facing=east": {
      "model": "easy_mob_farm:block/[[ --block_name-- ]]",
      "y": 90
    },
    "facing=south": {
      "model": "easy_mob_farm:block/[[ --block_name-- ]]",
      "y": 180
    },
    "facing=west": {
      "model": "easy_mob_farm:block/[[ --block_name-- ]]",
      "y": 270
    }
  }
}

+++ lang/en_us.json
@@@ before:"block.placeholder.text" @@@
  "block.easy_mob_farm.[[ --block_name-- ]]": "[[ --BlockName-- ]]",

+++ models/item/[[ --block_name-- ]].json
@@@ create @@@
{
  "parent": "easy_mob_farm:block/[[ --block_name-- ]]"
}

+++ minecraft/tags/blocks/mineable/pickaxe.json
@@@ after: "values": [ @@@
    "easy_mob_farm:[[ --block_name-- ]]",

+++ minecraft/tags/blocks/needs_iron_tool.json
@@@ after: "values": [ @@@
    "easy_mob_farm:[[ --block_name-- ]]",

+++ data/easy_mob_farm/blocks/[[ --block_name-- ]].json
@@@ create @@@

{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "bonus_rolls": 0,
      "entries": [
        {
          "type": "minecraft:item",
          "functions": [
            {
              "function": "minecraft:copy_name",
              "source": "block_entity"
            }
          ],
          "name": "easy_mob_farm:[[ --block_name-- ]]"
        }
      ],
      "conditions": [
        {
          "condition": "minecraft:survives_explosion"
        }
      ]
    }
  ]
}
