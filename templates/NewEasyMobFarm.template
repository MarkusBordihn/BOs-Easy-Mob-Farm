+++ block/entity/[[ --BlockName-- ]]Entity.java
@@@ create @@@

package de.markusbordihn.easymobfarm.block.entity;

import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import net.minecraft.core.BlockPos;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.TranslatableComponent;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.sounds.SoundSource;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockState;

import net.minecraftforge.event.server.ServerAboutToStartEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod.EventBusSubscriber;

import de.markusbordihn.easymobfarm.Constants;
import de.markusbordihn.easymobfarm.block.ModBlocks;
import de.markusbordihn.easymobfarm.config.CommonConfig;

@EventBusSubscriber
public class [[ --BlockClassName-- ]]Entity extends MobFarmBlockEntity {

  private static final Logger log = LogManager.getLogger(Constants.LOG_NAME);
  private static final CommonConfig.Config COMMON = CommonConfig.COMMON;

  // Config settings
  private static int __[[ --block_name-- ]]__ProcessTime = COMMON.__[[ --block_name-- ]]__ProcessTime.get();
  private static int farmProcessingTime = 0;

  public [[ --BlockClassName-- ]]Entity(BlockPos blockPos, BlockState blockState) {
    super(ModBlocks.[[ --BLOCK_NAME-- ]]_ENTITY.get(), blockPos, blockState);
  }

  public [[ --BlockClassName-- ]]Entity(BlockEntityType<?> blockEntity, BlockPos blockPos,
      BlockState blockState) {
    super(blockEntity, blockPos, blockState);
  }

  @Override
  protected Component getDefaultName() {
    return new TranslatableComponent("container.easy_mob_farm.__[[ --block_name-- ]]__");
  }

  @SubscribeEvent
  public static void handleServerAboutToStartEvent(ServerAboutToStartEvent event) {
    __[[ --block_name-- ]]__ProcessTime = COMMON.__[[ --block_name-- ]]__ProcessTime.get();
    farmProcessingTime = __[[ --block_name-- ]]__ProcessTime * 20;
    log.info("{}: [[ --BlockName-- ]] with drops every {}s",
        Constants.LOG_MOB_FARM_PREFIX, __[[ --block_name-- ]]__ProcessTime);
  }

  @Override
  public int getFarmProcessingTime() {
    return farmProcessingTime;
  }

  @Override
  public void processAdditionalEffects(Level level, BlockPos blockPos,
      MobFarmBlockEntity blockEntity, ItemStack capturedMob) {
    super.processAdditionalEffects(level, blockPos, blockEntity, capturedMob);
    // level.playSound(null, blockPos, SoundEvents.CHICKEN_EGG, SoundSource.BLOCKS, 1.0F, 1.0F);
  }

}

+++ block/[[ --BlockName-- ]].java
@@@ create @@@

package de.markusbordihn.easymobfarm.block;

import javax.annotation.Nullable;

import net.minecraft.core.BlockPos;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.context.UseOnContext;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.entity.BlockEntityTicker;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.block.state.BlockState;

import de.markusbordihn.easymobfarm.block.entity.[[ --BlockName-- ]]Entity;
import de.markusbordihn.easymobfarm.item.CapturedMobItem;

public class [[ --BlockClassName-- ]] extends MobFarmBlock {

  public static final String NAME = "[[ --block_name-- ]]";

  public [[ --BlockClassName-- ]](BlockBehaviour.Properties properties) {
    super(properties);
  }

  @Override
  public BlockEntity newBlockEntity(BlockPos blockPos, BlockState blockState) {
    return new [[ --BlockName-- ]]Entity(ModBlocks.[[ --BLOCK_NAME-- ]]_ENTITY.get(), blockPos, blockState);
  }

  @Override
  public boolean canConsumeCapturedMob(Level level, BlockPos blockPos, BlockState blockState,
      BlockEntity blockEntity, Player player, ItemStack itemStack) {
    if (itemStack.getItem() instanceof CapturedMobItem capturedMobItem) {
      String capturedMobType = capturedMobItem.getCapturedMobType(itemStack);
      if (capturedMobType.equals("minecraft:chicken")) {
        return true;
      }
    }
    return false;
  }

  @Override
  public InteractionResult consumeCapturedMob(Level level, BlockPos blockPos, BlockState blockState,
      BlockEntity blockEntity, ItemStack itemStack, UseOnContext context) {
    [[ --BlockName-- ]]Entity [[ --block_name-- ]]Entity = ([[ --BlockName-- ]]Entity) blockEntity;
    [[ --block_name-- ]]Entity.updateLevel(level);
    if (![[ --block_name-- ]]Entity.hasMob()) {
      [[ --block_name-- ]]Entity.setMob(itemStack);
      context.getPlayer().setItemInHand(context.getHand(), ItemStack.EMPTY);
      return InteractionResult.CONSUME;
    }
    return InteractionResult.PASS;
  }

  @Override
  @Nullable
  public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level level, BlockState blockState,
      BlockEntityType<T> blockEntityType) {
    return level.isClientSide ? null
        : createTickerHelper(blockEntityType, ModBlocks.[[ --BLOCK_NAME-- ]]_ENTITY.get(),
            [[ --BlockName-- ]]Entity::serverTick);
  }

}

+++ block/ModBlocks.java
@@@ after:@TemplateEntryPoint("Register Blocks") @@@

  public static final RegistryObject<Block> [[ --BLOCK_NAME-- ]] =
      BLOCKS.register([[ --BlockClassName-- ]].NAME, () -> new [[ --BlockClassName-- ]](BlockBehaviour.Properties
          .of(Material.STONE).requiresCorrectToolForDrops().strength(2.0F, 2.0F)
          .lightLevel(blockState -> 1).noOcclusion()));

+++ block/ModBlocks.java
@@@ after:@TemplateEntryPoint("Register Entity") @@@

  public static final RegistryObject<BlockEntityType<[[ --BlockClassName-- ]]Entity>> [[ --BLOCK_NAME-- ]]_ENTITY =
      ENTITIES.register([[ --BlockClassName-- ]].NAME, () -> BlockEntityType.Builder
          .of([[ --BlockClassName-- ]]Entity::new, [[ --BLOCK_NAME-- ]].get()).build(null));

+++ client/renderer/[[ --BlockName-- ]]Renderer.java
@@@ create @@@

package de.markusbordihn.easymobfarm.client.renderer;

import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.math.Vector3f;

import net.minecraft.client.renderer.MultiBufferSource;
import net.minecraft.client.renderer.blockentity.BlockEntityRendererProvider;
import net.minecraft.core.Direction;

import de.markusbordihn.easymobfarm.block.MobFarmBlock;
import de.markusbordihn.easymobfarm.block.entity.[[ --BlockClassName-- ]]Entity;

public class [[ --BlockClassName-- ]]Renderer extends MobFarmRendererBase<[[ --BlockClassName-- ]]Entity> {

  public [[ --BlockClassName-- ]]Renderer(BlockEntityRendererProvider.Context context) {
    super(context);
  }

  @Override
  public void render([[ --BlockClassName-- ]]Entity blockEntity, float partialTicks, PoseStack poseStack,
      MultiBufferSource buffer, int combinedLight, int combinedOverlay) {

    Direction direction = blockEntity.getBlockState().getValue(MobFarmBlock.FACING);

    // Render Chicken
    if (blockEntity.hasMob()) {
      poseStack.pushPose();
      poseStack.translate(0.5D, 1D / 16D, 0.5D);
      poseStack.mulPose(Vector3f.YP.rotationDegrees(-direction.toYRot()));
      poseStack.translate(0D, 0D, -1D / 16D);
      poseStack.scale(0.6F, 0.6F, 0.6F);
      renderChicken(0F, poseStack, buffer, combinedLight);
      poseStack.popPose();
    }

  }

}

+++ client/renderer/ClientRenderer.java
@@@ after:// @TemplateEntryPoint("Register Entity Renderer") @@@

    event.registerBlockEntityRenderer(ModBlocks.[[ --BLOCK_NAME-- ]]_ENTITY.get(),
        [[ --BlockClassName-- ]]Renderer::new);

+++ client/renderer/ClientRenderer.java
@@@ after:// @TemplateEntryPoint("Register Render Layers") @@@

      ItemBlockRenderTypes.setRenderLayer(ModBlocks.[[ --BLOCK_NAME-- ]].get(),
          RenderType.cutoutMipped());

+++ config/CommonConfig.java
@@@ before:Config(ForgeConfigSpec.Builder builder) { @@@

public final ForgeConfigSpec.IntValue __[[ --block_name-- ]]__ProcessTime;

+++ config/CommonConfig.java
@@@ before:// @TemplateEntryPoint("Register Forge Config Spec") @@@

      builder.push("[[ --BlockName-- ]]");
      __[[ --block_name-- ]]__ProcessTime =
          builder.comment("Defines after how many seconds a drop is performed.")
              .defineInRange("__[[ --block_name-- ]]__ProcessTime", 300, 10, 3600);
      builder.pop();

+++ item/ModItems.java
@@@ after:@TemplateEntryPoint("Register Block Items") @@@

  public static final RegistryObject<Item> C[[ --BLOCK_NAME-- ]] =
      ITEMS.register([[ --BlockClassName-- ]].NAME, () -> new BlockItem(ModBlocks.[[ --BLOCK_NAME-- ]].get(),
          new Item.Properties().tab(EasyMobFarmTab.MOB_FARM)));

+++ blockstates/[[ --block_name-- ]].json
@@@ create @@@

{
  "variants": {
    "facing=north": {
      "model": "easy_mob_farm:block/[[ --block_name-- ]]",
      "y": 0
    },
    "facing=east": {
      "model": "easy_mob_farm:block/[[ --block_name-- ]]",
      "y": 90
    },
    "facing=south": {
      "model": "easy_mob_farm:block/[[ --block_name-- ]]",
      "y": 180
    },
    "facing=west": {
      "model": "easy_mob_farm:block/[[ --block_name-- ]]",
      "y": 270
    }
  }
}

+++ lang/en_us.json
@@@ before:"block.placeholder.text" @@@
  "block.easy_mob_farm.[[ --block_name-- ]]": "[[ --BlockName-- ]]",

+++ models/item/[[ --block_name-- ]].json
@@@ create @@@
{
  "parent": "easy_mob_farm:block/[[ --block_name-- ]]"
}

+++ minecraft/tags/blocks/mineable/pickaxe.json
@@@ after: "values": [ @@@
    "easy_mob_farm:[[ --block_name-- ]]",

+++ minecraft/tags/blocks/needs_iron_tool.json
@@@ after: "values": [ @@@
    "easy_mob_farm:[[ --block_name-- ]]",

+++ data/easy_mob_farm/blocks/[[ --block_name-- ]].json
@@@ create @@@

{
  "type": "minecraft:block",
  "pools": [
    {
      "rolls": 1,
      "bonus_rolls": 0,
      "entries": [
        {
          "type": "minecraft:item",
          "functions": [
            {
              "function": "minecraft:copy_name",
              "source": "block_entity"
            }
          ],
          "name": "easy_mob_farm:[[ --block_name-- ]]"
        }
      ],
      "conditions": [
        {
          "condition": "minecraft:survives_explosion"
        }
      ]
    }
  ]
}
